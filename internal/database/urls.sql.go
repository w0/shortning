// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: urls.sql

package database

import (
	"context"
)

const addClick = `-- name: AddClick :exec
UPDATE urls
SET clicks = clicks + 1,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) AddClick(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, addClick, id)
	return err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls
WHERE id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUrl, id)
	return err
}

const getUrl = `-- name: GetUrl :one
SELECT id, created_at, updated_at, url, clicks FROM urls WHERE id = $1
`

func (q *Queries) GetUrl(ctx context.Context, id int32) (Url, error) {
	row := q.db.QueryRow(ctx, getUrl, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Clicks,
	)
	return i, err
}

const getUrlsCreatedBefore = `-- name: GetUrlsCreatedBefore :many
SELECT id FROM urls
WHERE created_at < now() - MAKE_INTERVAL(DAYS => $1)
`

func (q *Queries) GetUrlsCreatedBefore(ctx context.Context, days int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getUrlsCreatedBefore, days)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrlsUnderClickCount = `-- name: GetUrlsUnderClickCount :many
SELECT id, created_at, updated_at, url, clicks FROM urls
WHERE clicks <= $1 and
    created_at < now() - MAKE_INTERVAL(DAYS => $2)
`

type GetUrlsUnderClickCountParams struct {
	Clicks int32
	Days   int32
}

func (q *Queries) GetUrlsUnderClickCount(ctx context.Context, arg GetUrlsUnderClickCountParams) ([]Url, error) {
	rows, err := q.db.Query(ctx, getUrlsUnderClickCount, arg.Clicks, arg.Days)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
			&i.Clicks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newUrl = `-- name: NewUrl :one
INSERT INTO urls (created_at, updated_at, url)
VALUES (
    NOW(),
    NOW(),
    $1
)
RETURNING id, created_at, updated_at, url, clicks
`

func (q *Queries) NewUrl(ctx context.Context, url string) (Url, error) {
	row := q.db.QueryRow(ctx, newUrl, url)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
		&i.Clicks,
	)
	return i, err
}
